# ====================================================
# Workflow: update.yml
# Repo:     my-movie-database
# Author:   BruceBanner001
# ====================================================
#
# This GitHub Actions workflow:
# - Runs weekly (Sunday 12:00 AM IST) OR manually via Actions tab
# - Installs Python + dependencies (requirements.txt)
# - Writes Google Drive service account credentials from secret
# - Runs create_update_backup_delete.py:
#     ‚Ä¢ Reads Excel from Drive (private)
#     ‚Ä¢ Generates seriesData.json
#     ‚Ä¢ Downloads & resizes cover images (600x900, absolute URLs)
#     ‚Ä¢ Scrapes high-quality synopsis & duration
#     ‚Ä¢ Creates backups of changed/removed objects
# - Commits and pushes updated seriesData.json, images/, and backups/
# - Publishes via GitHub Pages
#
# ====================================================
name: Excel ‚Üí JSON Automation

on:
  # === Scheduled Run ===
  # Runs every Sunday at 12:00 AM IST
  # (IST = UTC +5:30 ‚Üí 12:00 AM IST = 18:30 UTC Saturday)
  schedule:
    - cron: "30 18 * * 6"

  # === Manual Run ===
  # Can be triggered manually from GitHub Actions UI
  workflow_dispatch:

  # === On Push Run ===
  # Runs when any of these files change
  push:
    paths:
      - create_update_backup_delete.py
      - requirements.txt
      - .github/workflows/update.yml

jobs:
  update-dataset:
    runs-on: ubuntu-latest

    # Safety: Cancel run before GitHub's hard 6h limit
    timeout-minutes: 355   # 5h 55m

    env:
      # === Customizable Settings ===
      MAX_PER_RUN: 100              # Process only this many shows per run (set 0 for ALL)
      KEEP_OLD_IMAGES_DAYS: 7       # Retain old images for this many days before deletion
      GITHUB_PAGES_URL: "https://<your-username>.github.io/<your-repo>"  # üëà CHANGE THIS
      TZ: "Asia/Kolkata"            # Ensure timestamps are IST

    steps:
      # === Step 1: Checkout repo ===
      - name: Checkout repo
        uses: actions/checkout@v4

      # === Step 2: Setup Python 3.11 ===
      - name: Set Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      # === Step 3: Install dependencies ===
      - name: Install dependencies
        run: pip install -r requirements.txt

      # === Step 4: Write service account JSON ===
      # REQUIRED SECRET: GDRIVE_SERVICE_ACCOUNT
      # - Value: contents of your Google Service Account JSON file
      # - Example value (JSON):
      #   {
      #     "type": "service_account",
      #     "project_id": "my-project-id",
      #     "private_key_id": "xxxx",
      #     "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEv...",
      #     "client_email": "my-service-account@myproject.iam.gserviceaccount.com",
      #     ...
      #   }
      # IMPORTANT: In Google Drive, share your Excel file with the `client_email` above
      # (give Viewer access).
      - name: Write service account JSON
        run: echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT }}" > GDRIVE_SERVICE_ACCOUNT.json

      # === Step 5: Write Excel file ID ===
      # REQUIRED SECRET: EXCEL_FILE_ID
      # - Value: Just the File ID from Google Drive (not the whole URL).
      # - Example:
      #   Drive link: https://drive.google.com/file/d/1AbCdEfGhIjKlMnOpQRsTuVWxyz/view?usp=sharing
      #   File ID   : 1AbCdEfGhIjKlMnOpQRsTuVWxyz
      - name: Write Excel file ID
        run: echo "${{ secrets.EXCEL_FILE_ID }}" > EXCEL_FILE_ID.txt

      # === Step 6: Debug check for secrets ===
      # This step confirms that EXCEL_FILE_ID.txt and GDRIVE_SERVICE_ACCOUNT.json exist.
      # Helps diagnose issues if the script later says "‚ùå No Excel file available".
      - name: Debug check for files
        run: |
          echo "üîé Checking if secrets were written correctly..."
          ls -l
          echo "--- EXCEL_FILE_ID.txt ---"
          cat EXCEL_FILE_ID.txt || echo "‚ùå Missing EXCEL_FILE_ID.txt"
          echo "--- First 5 lines of GDRIVE_SERVICE_ACCOUNT.json ---"
          head -n 5 GDRIVE_SERVICE_ACCOUNT.json || echo "‚ùå Missing GDRIVE_SERVICE_ACCOUNT.json"

      # === Step 7: Run the Python update script ===
      # Behavior:
      # - If this run is triggered by schedule ‚Üí SCHEDULED_RUN=true
      #   ‚Üí Script tries to fetch better images/synopsis even if already present.
      # - Otherwise (push/manual) ‚Üí SCHEDULED_RUN=false
      #   ‚Üí Script skips re-fetching if data already exists.
      - name: Run update script
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            export SCHEDULED_RUN=true
          else
            export SCHEDULED_RUN=false
          fi
          python create_update_backup_delete.py

      # === Step 8: Upload run report ===
      # Each run creates reports/report_DDMMYYYY_HHMM.txt
      # This artifact can be downloaded from Actions UI
      - name: Upload run report
        uses: actions/upload-artifact@v4
        with:
          name: run-report
          path: reports/*.txt

      # === Step 9: Commit & Push changes ===
      # Commits updated JSON, images, backups, old-images, and reports back to repo.
      - name: Commit & Push changes
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add seriesData.json images/ backups/ old-images/ reports/
          git commit -m "Auto update: $(date +'%d-%B-%Y %H:%M IST')" || echo "No changes to commit"
          git push

      # === Step 10: Send Email Notification ===
      # REQUIRED SECRETS (for Gmail example):
      #   SMTP_SERVER   = smtp.gmail.com
      #   SMTP_PORT     = 465
      #   SMTP_USERNAME = subramanianthayuman@gmail.com
      #   SMTP_PASSWORD = App Password (from Google App Passwords, NOT your normal password)
      #   NOTIFY_EMAIL  = subramanianthayuman@gmail.com (or another recipient)
      # Email Behavior:
      # - Manual Run (workflow_dispatch) ‚Üí Always send (success + failure)
      # - Scheduled Run (schedule) ‚Üí Send success + failure
      # - Push Run ‚Üí Send only on failure
      - name: Send email with run report
        if: |
          github.event_name == 'workflow_dispatch' ||
          github.event_name == 'schedule' ||
          (github.event_name == 'push' && failure())
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
          secure: true
          subject: >
            ${{ 
              github.event_name == 'workflow_dispatch' && job.status == 'success' && '[SUCCESS][Manual] Excel‚ÜíJSON Workflow' ||
              github.event_name == 'workflow_dispatch' && job.status == 'failure' && '[FAILED][Manual] Excel‚ÜíJSON Workflow'  ||
              github.event_name == 'schedule' && job.status == 'success' && '[SUCCESS][Weekly] Excel‚ÜíJSON Workflow' ||
              github.event_name == 'schedule' && job.status == 'failure' && '[FAILED][Weekly] Excel‚ÜíJSON Workflow' ||
              github.event_name == 'push' && job.status == 'failure' && '[FAILED][Push] Excel‚ÜíJSON Workflow' ||
              '[INFO] Excel‚ÜíJSON Workflow'
            }}
          body: |
            Hello,

            Workflow Name : Excel ‚Üí JSON Automation
            Repository    : ${{ github.repository }}
            Triggered By  : ${{ github.event_name }}
            Status        : **${{ job.status }}**

            Attached report contains:
              - Data Created
              - Data Updated
              - Image Updated (Old && New)

            Regards,
            GitHub Actions Bot
          attachments: reports/*.txt
