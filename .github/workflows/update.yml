# =====================================================================
# Workflow: Excel → JSON Update (with Email Notifications & Inputs)
# ---------------------------------------------------------------------
# Purpose:
#   - Fetch private Excel from Google Drive
#   - Transform into seriesData.json with images/synopsis
#   - Backup & cleanup old data
#   - Generate detailed reports
#   - Send email with inline summary + full report attached
#
# Trigger Types:
#   - Manual run (workflow_dispatch) → Subject prefix: [Manual]
#   - Scheduled run (weekly, Sunday 00:00 UTC) → Subject prefix: [Automatic]
#
# Manual Run Inputs:
#   - MAX_RUN_TIME_MINUTES → Max runtime per workflow run (0 = unlimited)
#   - MAX_PER_RUN → Limit number of shows processed (0 = process all)
# =====================================================================

name: Excel to JSON Update

on:
  workflow_dispatch:              # Manual trigger from GitHub UI
    inputs:
      MAX_RUN_TIME_MINUTES:
        description: 'Max run time in minutes for this run (0 = no time limit)'
        default: '300'
        required: false
      MAX_PER_RUN:
        description: 'Limit number of shows to process (0 = process all)'
        default: '0'
        required: false
  schedule:
    - cron: "0 0 * * 0"           # Automatic trigger every Sunday 00:00 UTC

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      # Pass workflow_dispatch inputs into environment
      MAX_RUN_TIME_MINUTES: ${{ github.event.inputs.MAX_RUN_TIME_MINUTES }}
      MAX_PER_RUN: ${{ github.event.inputs.MAX_PER_RUN }}

    steps:
      # --------------------------------------------------------------
      # 1. Checkout repository
      # --------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # --------------------------------------------------------------
      # 2. Set up Python
      # --------------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"  # Consistent with requirements.txt

      # --------------------------------------------------------------
      # 3. Install dependencies
      # --------------------------------------------------------------
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --------------------------------------------------------------
      # 4. Write secrets into files
      # --------------------------------------------------------------
      - name: Write secrets to files
        run: |
          echo "${{ secrets.EXCEL_FILE_ID }}" > EXCEL_FILE_ID.txt
          echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT }}" > GDRIVE_SERVICE_ACCOUNT.json

      # --------------------------------------------------------------
      # 5. Run updater script
      # --------------------------------------------------------------
      - name: Run updater script
        id: run_updater
        run: |
          python create_update_backup_delete.py > run.log 2>&1 || true

          # Extract email body portion
          sed -n '/===EMAIL_BODY_START===/,/===EMAIL_BODY_END===/p' run.log | \
          sed '/===EMAIL_BODY_START===/d;/===EMAIL_BODY_END===/d' > email_body.html || true

          # Show last lines for quick debugging
          tail -n 50 run.log

      # --------------------------------------------------------------
      # 6. Prepare email subject & inline summary
      # --------------------------------------------------------------
      - name: Set email outputs
        id: email_data
        if: ${{ always() }}
        run: |
          subj_date=$(date -u "+%d %B %Y %H%M")
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "email_subject=[Automatic] Workflow $subj_date Report" >> $GITHUB_OUTPUT
          else
            echo "email_subject=[Manual] Workflow $subj_date Report" >> $GITHUB_OUTPUT
          fi

          if [ -s email_body.html ]; then
            head -n 30 email_body.html > email_body_summary.html
            echo "email_body<<EOF" >> $GITHUB_OUTPUT
            cat email_body_summary.html >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "➡️ Full detailed report attached as TXT file." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "email_body=No summary generated." >> $GITHUB_OUTPUT
          fi

      # --------------------------------------------------------------
      # 7. Locate most recent report file for attachment
      # --------------------------------------------------------------
      - name: Find latest report file
        id: report_file
        run: |
          latest=$(ls -t reports/report_*.txt | head -n 1 || true)
          if [ -n "$latest" ]; then
            echo "report_file=$latest" >> $GITHUB_OUTPUT
          else
            echo "report_file=" >> $GITHUB_OUTPUT
          fi

      # --------------------------------------------------------------
      # 8. Send email with summary + attachment
      # --------------------------------------------------------------
      - name: Send consolidated report email
        if: ${{ steps.email_data.outputs.email_body != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ steps.email_data.outputs.email_subject }}
          body: ${{ steps.email_data.outputs.email_body }}
          content_type: text/html
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
          attachments: ${{ steps.report_file.outputs.report_file }}

      # --------------------------------------------------------------
      # 9. Commit updated artifacts back to repo
      # --------------------------------------------------------------
      - name: Commit changes
        if: ${{ always() }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add seriesData.json images/ old-images/ backups/ reports/ deleted-data/ || true
          git commit -m "Automated update: $(date -u '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push || echo "No changes to push"
