# ====================================================
# Workflow: update.yml
# Repo:     my-movie-database
# Author:   BruceBanner001
# ====================================================
#
# This GitHub Actions workflow:
# - Runs weekly (Sunday 12:00 AM IST) OR manually via Actions tab
# - Installs Python + dependencies (requirements.txt)
# - Writes Google Drive service account credentials from secret
# - Runs create_update_backup_delete.py:
#     â€¢ Reads Excel from Drive (private)
#     â€¢ Generates seriesData.json
#     â€¢ Downloads & resizes cover images (600x900, absolute URLs)
#     â€¢ Scrapes high-quality synopsis & duration
#     â€¢ Creates backups of changed/removed objects
# - Commits and pushes updated seriesData.json, images/, and backups/
# - Publishes via GitHub Pages
#
# ====================================================

name: Excel â†’ JSON Automation

on:
  # === Scheduled Run ===
  # Runs every Sunday at 12:00 AM IST
  # (IST = UTC +5:30 â†’ 12:00 AM IST = 18:30 UTC Saturday)
  schedule:
    - cron: "30 18 * * 6"

  # === Manual Run ===
  # Can be triggered manually from GitHub Actions UI
  workflow_dispatch:

  # === On Push Run ===
  # Runs when any of these files change
  push:
    paths:
      - create_update_backup_delete.py
      - requirements.txt
      - .github/workflows/update.yml

jobs:
  update-dataset:
    runs-on: ubuntu-latest

    # Safety: Cancel run before GitHub's hard 6h limit
    timeout-minutes: 355   # 5h 55m

    env:
      # === Customizable Settings ===
      MAX_PER_RUN: 100              # Process only 100 shows per run (set 0 for ALL)
      KEEP_OLD_IMAGES_DAYS: 7       # Retain old images for this many days before deletion
      GITHUB_PAGES_URL: "https://BruceBanner001.github.io/my-movie-database"  # ðŸ‘ˆ CHANGE this
      TZ: "Asia/Kolkata"            # Force timestamps to IST

    steps:
      # === Step 1: Checkout repo ===
      - name: Checkout repo
        uses: actions/checkout@v4

      # === Step 2: Setup Python 3.11 ===
      - name: Set Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      # === Step 3: Install dependencies ===
      - name: Install dependencies
        run: pip install -r requirements.txt

      # === Step 4: Write service account JSON ===
      - name: Write service account JSON
        run: echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT }}" > GDRIVE_SERVICE_ACCOUNT.json

      # === Step 5: Write Excel file ID ===
      - name: Write Excel file ID
        run: echo "${{ secrets.EXCEL_FILE_ID }}" > EXCEL_FILE_ID.txt

      # === Step 6: Run the Python update script ===
      - name: Run update script
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            export SCHEDULED_RUN=true
          else
            export SCHEDULED_RUN=false
          fi
          python create_update_backup_delete.py

      # === Step 7: Upload run report as artifact ===
      - name: Upload run report
        uses: actions/upload-artifact@v4
        with:
          name: run-report
          path: reports/*.txt

      # === Step 8: Commit & Push changes ===
      - name: Commit & Push changes
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add seriesData.json images/ backups/ old-images/ reports/
          git commit -m "Auto update: $(date +'%d-%B-%Y %H:%M IST')" || echo "No changes to commit"
          git push

      # === Step 9: Send email notification ===
      - name: Send email with run report
        if: |
          github.event_name == 'workflow_dispatch' ||
          failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
          secure: true

          # === Email subject depends on run type + status ===
          subject: >
            ${{ 
              github.event_name == 'workflow_dispatch' && job.status == 'success' && '[SUCCESS][Manual] Excelâ†’JSON Workflow' ||
              github.event_name == 'workflow_dispatch' && job.status == 'failure' && '[FAILED][Manual] Excelâ†’JSON Workflow'  ||
              github.event_name == 'schedule' && job.status == 'success' && '[SUCCESS][Weekly] Excelâ†’JSON Workflow' ||
              github.event_name == 'schedule' && job.status == 'failure' && '[FAILED][Weekly] Excelâ†’JSON Workflow' ||
              github.event_name == 'push' && job.status == 'failure' && '[FAILED][Push] Excelâ†’JSON Workflow' ||
              '[INFO] Excelâ†’JSON Workflow'
            }}

          body: |
            Hello,

            Workflow Name : Excel â†’ JSON Automation
            Repository    : ${{ github.repository }}
            Triggered By  : ${{ github.event_name }}
            Status        : **${{ job.status }}**

            Attached report contains:
              - Data Created
              - Data Updated
              - Image Updated (Old && New)

            Regards,
            GitHub Actions Bot

          # === Attach run report file ===
          attachments: reports/*.txt
