# ============================================================================
# Workflow: Excel → JSON Automation
# Purpose : Automate weekly + manual Excel → JSON updates, deletions, backups,
#           and run reports (TXT only) for "my-movie-database".
# ============================================================================

name: Excel → JSON Update

on:
  workflow_dispatch:
    inputs:
      MAX_RUN_TIME_MINUTES:
        description: 'Max run time in minutes for this run (0 = no time limit)'
        default: '300'
        required: false
      MAX_PER_RUN:
        description: 'Limit number of shows to process (0 = process all)'
        default: '0'
        required: false
  schedule:
    - cron: "30 18 * * 6"  # Scheduled: Every Sunday 00:00 AM IST (Saturday 18:30 UTC)

jobs:
  update-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # ------------------------------------------------------
      # 1. Checkout repo
      # ------------------------------------------------------
      - name: Checkout repo
        uses: actions/checkout@v4

      # ------------------------------------------------------
      # 2. Set up Python
      # ------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ------------------------------------------------------
      # 3. Install dependencies
      # ------------------------------------------------------
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ------------------------------------------------------
      # 4. Write secrets to runtime files
      # ------------------------------------------------------
      - name: Write Excel file ID
        run: echo "${{ secrets.EXCEL_FILE_ID }}" > EXCEL_FILE_ID.txt

      - name: Write Google Drive service account
        run: echo '${{ secrets.GDRIVE_SERVICE_ACCOUNT }}' > GDRIVE_SERVICE_ACCOUNT.json

      # ------------------------------------------------------
      # 5. Run main script
      # ------------------------------------------------------
      - name: Run Excel → JSON script
        id: run_updater
        env:
          GITHUB_PAGES_URL: https://brucebanner001.github.io/my-movie-database
          MAX_PER_RUN: ${{ github.event.inputs.MAX_PER_RUN || 0 }}
          MAX_RUN_TIME_MINUTES: ${{ github.event.inputs.MAX_RUN_TIME_MINUTES || 300 }}
          KEEP_OLD_IMAGES_DAYS: 7
          SCHEDULED_RUN: ${{ github.event_name == 'schedule' && 'true' || 'false' }}
        run: |
          set -e
          python create_update_backup_delete.py | tee updater_output.txt
          awk '/^===EMAIL_BODY_START===$/{flag=1;next}/^===EMAIL_BODY_END===$/{flag=0}flag' updater_output.txt > email_body.html || true
          if [ -s email_body.html ]; then
            subj_date=$(date -u "+%d %B %Y %H%M")
            echo "email_subject=[${{ github.event_name == 'schedule' && 'Automatic' || 'Manual' }}] Workflow $subj_date Report" >> $GITHUB_OUTPUT
            echo "email_body<<EOF" >> $GITHUB_OUTPUT
            cat email_body.html >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      # ------------------------------------------------------
      # 6. Commit & push changes
      # ------------------------------------------------------
      - name: Commit & push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add seriesData.json images/ backups/ reports/ deleted-data/
          git commit -m "Automated update: $(date -u '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push

      # ------------------------------------------------------
      # 7. Upload reports
      # ------------------------------------------------------
      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-reports
          path: reports/report_*.txt

      # ------------------------------------------------------
      # 8. Cleanup runtime secret files
      # ------------------------------------------------------
      - name: Cleanup secret files
        if: always()
        run: |
          rm -f EXCEL_FILE_ID.txt GDRIVE_SERVICE_ACCOUNT.json || true

      # ------------------------------------------------------
      # 9. Send consolidated report email
      # ------------------------------------------------------
      - name: Send consolidated report email
        if: ${{ steps.run_updater.outputs.email_body && steps.run_updater.outputs.email_body != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ steps.run_updater.outputs.email_subject }}
          body: ${{ steps.run_updater.outputs.email_body }}
          content_type: text/html
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
