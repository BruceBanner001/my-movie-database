# ============================================================================
# Workflow: Excel → JSON Automation (Robust, YAML-safe)
# Purpose : Automate weekly + manual Excel → JSON updates, deletions, backups,
#           and run reports (TXT only) for "my-movie-database".
# ============================================================================

name: Excel → JSON Update

on:
  workflow_dispatch:
    inputs:
      MAX_RUN_TIME_MINUTES:
        description: 'Max run time in minutes for this run (0 = no time limit)'
        default: '300'
        required: false
      MAX_PER_RUN:
        description: 'Limit number of shows to process (0 = process all)'
        default: '0'
        required: false
  schedule:
    - cron: "30 18 * * 6"  # Scheduled: Every Sunday 00:00 AM IST (Saturday 18:30 UTC)

jobs:
  update-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Write Excel file ID
        run: echo "${{ secrets.EXCEL_FILE_ID }}" > EXCEL_FILE_ID.txt

      - name: Write Google Drive service account
        run: echo '${{ secrets.GDRIVE_SERVICE_ACCOUNT }}' > GDRIVE_SERVICE_ACCOUNT.json

      - name: Run seriesData updater and capture report path
        id: run_updater
        env:
          EVENT_NAME: ${{ github.event_name }}
          GITHUB_PAGES_URL: https://brucebanner001.github.io/my-movie-database
          MAX_PER_RUN: ${{ github.event.inputs.MAX_PER_RUN || 0 }}
          MAX_RUN_TIME_MINUTES: ${{ github.event.inputs.MAX_RUN_TIME_MINUTES || 300 }}
          KEEP_OLD_IMAGES_DAYS: 7
          SCHEDULED_RUN: ${{ github.event_name == 'schedule' && 'true' || 'false' }}
        run: |
          set -euo pipefail
          # run the updater script and capture stdout / stderr
          output=$(python create_update_backup_delete.py 2>&1 || true)
          printf '%s\n' "$output"
          # try to extract the report path printed by the script
          report_path=$(printf '%s\n' "$output" | awk -F'→' '/Report written/ {gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2; exit}')
          if [ -z "$report_path" ] || [ ! -f "$report_path" ]; then
            report_path=$(ls -t reports/report_*.txt 2>/dev/null | head -n1 || true)
          fi
          if [ -z "$report_path" ]; then
            echo "report_path=" >> $GITHUB_OUTPUT
          else
            echo "report_path=$report_path" >> $GITHUB_OUTPUT
          fi
          if [ "${EVENT_NAME:-}" = "schedule" ]; then
            prefix="[Automatic]"
          else
            prefix="[Manual]"
          fi
          subj_date=$(date -u "+%d %B %Y %H%M")
          echo "email_subject=$prefix Workflow $subj_date Report" >> $GITHUB_OUTPUT

      - name: Commit & push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add seriesData.json images/ backups/ reports/ deleted-data/ backup-meta-data/
          git commit -m "Automated update: $(date -u '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-reports
          path: reports/

      - name: Scan for secrets
        if: always()
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source=. --report-path=reports/secrets_report.txt --no-banner --redact

      # ------------------ Compose consolidated email body (to file) ------------------
      - name: Compose consolidated email body (to file)
        id: compose_email_file
        run: |
          set -euo pipefail
          OUTFILE="report_email_body.txt"
          rm -f "$OUTFILE"
          {
            echo "SECRETS CHECK:"
            if [ -s reports/secrets_report.txt ]; then
              echo "- Gitleaks detected potential secrets. (Details below)"
              # Escape % for GitHub Actions formatting
              sed 's/%/%%/g' reports/secrets_report.txt
            else
              echo "- No obvious secrets detected."
            fi
            echo ""
            echo "--- REPORT CONTENT (pasted below) ---"
            # Prefer the path captured from the updater; fallback to latest report file
            report="${{ steps.run_updater.outputs.report_path }}" || true
            if [ -z "${report}" ] || [ ! -f "${report}" ]; then
              report=$(ls -t reports/report_*.txt 2>/dev/null | head -n1 || true)
            fi
            if [ -n "${report}" ] && [ -f "${report}" ]; then
              sed 's/%/%%/g' "${report}"
            else
              echo "⚠️ Report file not found."
            fi
          } > "$OUTFILE"
          echo "Wrote email body to $OUTFILE"

      # ------------------ Send consolidated report email (Python smtp) ------------------
      - name: Send consolidated report email (Python smtp)
        if: always()
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          NOTIFY_EMAIL: ${{ secrets.NOTIFY_EMAIL }}
          EMAIL_SUBJECT: ${{ steps.run_updater.outputs.email_subject }}
        run: |
          set -euo pipefail
          python - <<'PY'
import os, smtplib, ssl, sys
from email.message import EmailMessage

smtp_server = os.environ.get("SMTP_SERVER")
smtp_port = int(os.environ.get("SMTP_PORT") or "587")
username = os.environ.get("SMTP_USERNAME")
password = os.environ.get("SMTP_PASSWORD")
to_addr = os.environ.get("NOTIFY_EMAIL")
subject = os.environ.get("EMAIL_SUBJECT") or "Workflow Report"

body_path = "report_email_body.txt"
if not os.path.exists(body_path):
    print("⚠️ Email body file not found:", body_path)
    sys.exit(0)

with open(body_path, "r", encoding="utf-8") as f:
    body = f.read()

msg = EmailMessage()
msg["From"] = username
msg["To"] = to_addr
msg["Subject"] = subject
msg.set_content(body)

context = ssl.create_default_context()
try:
    with smtplib.SMTP(smtp_server, smtp_port, timeout=60) as server:
        server.starttls(context=context)
        server.login(username, password)
        server.send_message(msg)
    print("✅ Email sent successfully to", to_addr)
except Exception as e:
    print("⚠️ Failed to send email:", e)
    # Keep the workflow from failing solely due to email send problems
    sys.exit(0)
PY
