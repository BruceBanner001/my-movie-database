# ============================================================================
# Workflow: Excel â†’ JSON Automation
# Purpose : Automate weekly + manual Excel â†’ JSON updates, backups, images,
#           and reports for "my-movie-database".
# Triggers:
#   - Manual: workflow_dispatch (user presses "Run workflow")
#   - Automatic: schedule â†’ every Sunday at 12:00 UTC
# ============================================================================
name: Excel â†’ JSON Automation

on:
  workflow_dispatch:
    inputs:
      MAX_RUN_MINUTES:
        description: 'Max run time in minutes for this run (0 = no time limit)'
        required: false
        default: '120'
  schedule:
    - cron: '0 12 * * 0'  # Sunday 12:00 UTC

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      MAX_PER_RUN: 0
      KEEP_OLD_IMAGES_DAYS: 7
      GITHUB_PAGES_URL: "https://<your-username>.github.io/my-movie-database"
      TZ: "Asia/Kolkata"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: python -m pip install --upgrade pip && pip install -r requirements.txt

      - name: Write GDrive service account (if provided)
        if: ${{ secrets.GDRIVE_SERVICE_ACCOUNT != '' }}
        run: |
          echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT }}" > GDRIVE_SERVICE_ACCOUNT.json

      - name: Write EXCEL_FILE_ID (if provided)
        if: ${{ secrets.EXCEL_FILE_ID != '' }}
        run: |
          echo "${{ secrets.EXCEL_FILE_ID }}" > EXCEL_FILE_ID.txt

      - name: Set MAX_RUN_TIME_MINUTES based on trigger
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "MAX_RUN_TIME_MINUTES=${{ github.event.inputs.MAX_RUN_MINUTES }}" >> $GITHUB_ENV
          else
            echo "MAX_RUN_TIME_MINUTES=240" >> $GITHUB_ENV
          fi

      - name: Run update script
        id: run_update
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            export SCHEDULED_RUN=true
          else
            export SCHEDULED_RUN=false
          fi
          python create_update_backup_delete.py || exit 2

      - name: Upload reports (TXT only)
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports/*.txt

      - name: Check for accidental secret leakage
        run: |
          mkdir -p reports
          exposed=false
          if [ -n "${{ secrets.EXCEL_FILE_ID }}" ] && grep -R --binary-files=without-match -F "${{ secrets.EXCEL_FILE_ID }}" . >/dev/null 2>&1; then
            exposed=true
          fi
          if [ -n "${{ secrets.GDRIVE_SERVICE_ACCOUNT }}" ] && grep -R --binary-files=without-match -F "${{ secrets.GDRIVE_SERVICE_ACCOUNT }}" . >/dev/null 2>&1; then
            exposed=true
          fi
          echo "SecretsExposed:${exposed}" > reports/secrets_status.txt

      - name: Send success email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "âœ… Excel â†’ JSON Update SUCCESS"
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: "GitHub Actions <${{ secrets.NOTIFY_EMAIL }}>"
          body: |
            $(cat reports/secrets_status.txt)

            Run type: ${{ github.event_name }}
            Outcome: SUCCESS
            Run timestamp: $(date -u)
            See attached run report.
          attachments: reports/*.txt

      - name: Send failure email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "ðŸš¨ Excel â†’ JSON Update FAILED!"
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: "GitHub Actions <${{ secrets.NOTIFY_EMAIL }}>"
          body: |
            $(cat reports/secrets_status.txt)

            Run type: ${{ github.event_name }}
            Outcome: FAILURE
            Run timestamp: $(date -u)
            See attached run report.
          attachments: reports/*.txt

      - name: Commit and push changes
        if: success()
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add seriesData.json reports/ images/ backups/ deleted-data/ || true
          git commit -m "Automated update: $(date -u +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push || echo "git push failed"

      - name: Clean up
        run: |
          rm -f EXCEL_FILE_ID.txt GDRIVE_SERVICE_ACCOUNT.json
