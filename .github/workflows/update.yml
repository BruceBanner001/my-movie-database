name: Update JSON

on:
  workflow_dispatch:
    inputs:
      max_run_time_minutes:
        description: 'Max run time in minutes for this run (0 = no time limit)'
        required: false
        default: ''
  schedule:
    - cron: '0 2 * * 0'  # weekly at 02:00 UTC (adjust as needed)

permissions:
  contents: read
  actions: write
  checks: write

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      GDRIVE_SERVICE_ACCOUNT: ${{ secrets.GDRIVE_SERVICE_ACCOUNT }}
      EXCEL_FILE_ID: ${{ secrets.EXCEL_FILE_ID }}
      SCHEDULED_RUN: ${{ github.event_name == 'schedule' && 'true' || 'false' }}
      MAX_RUN_TIME_MINUTES: ${{ github.event.inputs.max_run_time_minutes || '0' }}
      MAX_PER_RUN: ${{ env.MAX_PER_RUN || '0' }}
      DEBUG_FETCH: 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run gitleaks scan (detect potential secrets)
        uses: zricethezav/gitleaks-action@v2
        with:
          args: --report-format json --report-path gitleaks-report.json || true

      - name: Run update script
        id: run_update
        run: |
          python create_update_backup_delete.py

      - name: Prepare report and secrets status for email
        id: prepare_report
        run: |
          set -e
          latest_txt=$(ls reports/report_*.txt 2>/dev/null | sort | tail -n1 || true)
          latest_html="${latest_txt%.txt}.html"
          report_html=""
          if [ -f "$latest_html" ]; then
            report_html=$(cat "$latest_html")
          elif [ -f "$latest_txt" ]; then
            ts="$(date -u +"%d %B %Y_%H.%M")"
            report_html="<html><body><h1>$ts</h1><pre>$(cat "$latest_txt")</pre></body></html>"
          else
            report_html="<html><body><h1>No Report</h1></body></html>"
          fi
          secrets_found="false"
          secrets_details=""
          if [ -f gitleaks-report.json ]; then
            count=$(jq '. | length' gitleaks-report.json || echo 0)
            if [ "$count" -gt 0 ]; then
              secrets_found="true"
              secrets_details="$(jq -r '.[] | "File: \(.file) | Rule: \(.rule) | Description: \(.description)"' gitleaks-report.json | sed ':a;N;$!ba;s/\n/<br\/>' )"
            fi
          fi
          if [ "$secrets_found" == "false" ]; then
            final_html="<html><body><h2 style='color:green'>NO SECRETS EXPOSED..</h2>$(echo "$report_html" )</body></html>"
          else
            final_html="<html><body><h2 style='color:red'>⚠️ SECRETS EXPOSED!</h2><div>$secrets_details</div><hr/>$(echo "$report_html" )</body></html>"
          fi
          echo "::set-output name=report_html::$(echo "$final_html" | sed 's/%/%25/g' | sed 's/\n/%0A/g' | sed 's/\r/%0D/g')"
          if [ -f reports/status.json ]; then
            cont=$(jq -r .continued reports/status.json || echo false)
          else
            cont="false"
          fi
          echo "::set-output name=continued::${cont}"

      - name: Send email with report (HTML body)
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.example.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "JSON Update Report - ${{ steps.prepare_report.outputs.continued == 'true' && '[CONTINUED]' || '[FINAL]' }} $(date -u +' %d %B %Y_%H.%M')"
          from: 'noreply@example.com'
          to: ${{ secrets.NOTIFY_EMAIL }}
          body: ${{ steps.prepare_report.outputs.report_html }}
          is_html: true

      - name: Re-dispatch workflow if continuation required
        if: ${{ steps.prepare_report.outputs.continued == 'true' }}
        run: |
          echo "Continuation requested — re-dispatching workflow for next cycle."
          owner_repo="${{ github.repository }}"
          workflow_file="update.yml"
          ref="main"
          curl -s -X POST             -H "Accept: application/vnd.github+json"             -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"             https://api.github.com/repos/$owner_repo/actions/workflows/$workflow_file/dispatches             -d "{"ref":"$ref"}"
