# ============================================================================
# Workflow: Excel ‚Üí JSON Automation
# Purpose : Automate weekly + manual Excel ‚Üí JSON updates, deletions, backups,
#           and run reports (TXT only) for "my-movie-database".
# ============================================================================

name: Excel ‚Üí JSON Update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * 1" # every Monday 9 AM

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------
      # 1Ô∏è‚É£ Checkout repository
      # ------------------------------------------------------------
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ------------------------------------------------------------
      # 2Ô∏è‚É£ Setup Python
      # ------------------------------------------------------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ------------------------------------------------------------
      # 3Ô∏è‚É£ Install Dependencies
      # ------------------------------------------------------------
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      # ------------------------------------------------------------
      # 4Ô∏è‚É£ Run Updater Script and Generate Report
      # ------------------------------------------------------------
      - name: Run Updater
        id: run_updater
        run: |
          set -euo pipefail
          mkdir -p reports
          timestamp=$(date +"%d_%B_%Y_%H%M")
          report_path="reports/report_v2.0.0_Stable_${timestamp}.txt"
          echo "Running Python updater and generating report: $report_path"
          python scripts/update_data.py > "$report_path"
          echo "report_path=$report_path" >> "$GITHUB_OUTPUT"
          echo "email_subject=Report Generated: $timestamp" >> "$GITHUB_OUTPUT"

      # ------------------------------------------------------------
      # 5Ô∏è‚É£ Compose Email Body (Embed report content)
      # ------------------------------------------------------------
      - name: Compose Email Body
        id: compose_email
        run: |
          set -euo pipefail
          report="${{ steps.run_updater.outputs.report_path }}"
          email_file="/tmp/email_body.txt"

          if [ -z "$report" ] || [ ! -f "$report" ]; then
            echo "::warning::Report not found, creating fallback message"
            echo "Workflow completed, but no report was generated." > "$email_file"
          else
            echo "::group::Composing email body"
            {
              echo "Hi Team,"
              echo
              echo "Here is the latest automated report from workflow run:"
              echo "-----------------------------------------------------"
              cat "$report"
              echo "-----------------------------------------------------"
              echo
              echo "Best Regards,"
              echo "GitHub Actions Bot ü§ñ"
            } > "$email_file"
            echo "::endgroup::"
          fi

          echo "email_file=$email_file" >> "$GITHUB_OUTPUT"

      # ------------------------------------------------------------
      # 6Ô∏è‚É£ Send Email (Body Only, No Attachments)
      # ------------------------------------------------------------
      - name: Send Email
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          NOTIFY_EMAIL: ${{ secrets.NOTIFY_EMAIL }}
          FROM_EMAIL: ${{ secrets.SMTP_USERNAME }}
          EMAIL_SUBJECT: ${{ steps.run_updater.outputs.email_subject }}
        run: |
          set -euo pipefail

          email_file="${{ steps.compose_email.outputs.email_file }}"
          if [ -z "$email_file" ] || [ ! -f "$email_file" ]; then
            echo "::warning::Email body not found, sending fallback text."
            echo "Automated workflow executed successfully, but no detailed report found." > /tmp/email_fallback.txt
            email_file="/tmp/email_fallback.txt"
          fi

          # Decode and execute embedded Python email sender
          echo "aW1wb3J0IHN5cywgb3MsIHNtdHBsaWIKZnJvbSBlbWFpbC5taW1lLnRleHQgaW1wb3J0IE1JTUVUZXh0CmZyb20gZW1haWwubWltZS5tdWx0aXBhcnQgaW1wb3J0IE1JTUVNdWx0aXBhcnQKCmVtYWlsX2ZpbGUgPSBzeXMuYXJndlsxXQpzbXRwX3NlcnZlciA9IG9zLmVudmlyb24uZ2V0KCJTTVRQX1NFUlZFUiIpCnNtdHBfcG9ydCA9IG9zLmVudmlyb24uZ2V0KCJTTVRQX1BPUlQiKSBvciAiNTg3IgpzbXRwX3VzZXIgPSBvcy5lbnZpcm9uLmdldCgiU01UUF9VU0VSTkFNRSIpCnNtdHBfcGFzcyA9IG9zLmVudmlyb24uZ2V0KCJTTVRQX1BBU1NXT1JEIikKdG9fYWRkciA9IG9zLmVudmlyb24uZ2V0KCJOT1RJRllfRU1BSUwiKQpmcm9tX2FkZHIgPSBvcy5lbnZpcm9uLmdldCgiRlJPTV9FTUFJTCIpIG9yIHNtdHBfdXNlcgpzdWJqZWN0ID0gb3MuZW52aXJvbi5nZXQoIkVNQUlMX1NVQkpFQ1QiKSBvciAiV29ya2Zsb3cgUmVwb3J0IgoKd2l0aCBvcGVuKGVtYWlsX2ZpbGUsICJyIiwgZW5jb2Rpbmc9InV0Zi04IiwgZXJyb3JzPSJyZXBsYWNlIikgYXMgZmg6CiAgICBib2R5ID0gZmgucmVhZCgpCgptc2cgPSBNSU1FTXVsdGlwYXJ0KCkKbXNnWyJGcm9tIl0gPSBmcm9tX2FkZHIKbXNnWyJUbyJdID0gdG9fYWRkcgptc2dbIlN1YmplY3QiXSA9IHN1YmplY3QKbXNnLmF0dGFjaChNSU1FVGV4dChib2R5LCAicGxhaW4iKSkKCnRyeToKICAgIHBvcnQgPSBpbnQoc210cF9wb3J0KQpleGNlcHQgRXhjZXB0aW9uOgogICAgcG9ydCA9IDU4NwoKaWYgcG9ydCA9PSA0NjU6CiAgICBzZXJ2ZXIgPSBzbXRwbGliLlNNVFBfU1NMKHNtdHBfc2VydmVyLCBwb3J0LCB0aW1lb3V0PTMwKQplbHNlOgogICAgc2VydmVyID0gc210cGxpYi5TTVRQKHNtdHBfc2VydmVyLCBwb3J0LCB0aW1lb3V0PTMwKQogICAgc2VydmVyLnN0YXJ0dGxzKCkKdHJ5OgogICAgaWYgc210cF91c2VyIGFuZCBzbXRwX3Bhc3M6CiAgICAgICAgc2VydmVyLmxvZ2luKHNtdHBfdXNlciwgc210cF9wYXNzKQogICAgc2VydmVyLnNlbmRtYWlsKGZyb21fYWRkciwgW3RvX2FkZHJdLCBtc2cuYXNfc3RyaW5nKCkpCmZpbmFsbHk6CiAgICB0cnk6CiAgICAgICAgc2VydmVyLnF1aXQoKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICBwYXNzCg==" | base64 --decode > /tmp/send_email.py

          python /tmp/send_email.py "$email_file"
          rm -f /tmp/send_email.py

      # ------------------------------------------------------------
      # 7Ô∏è‚É£ Commit & Push Report Back to Repo
      # ------------------------------------------------------------
      - name: Commit and Push Changes
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add reports/
          if git diff --cached --quiet; then
            echo "No new report changes to commit."
          else
            git commit -m "üßæ Auto-update: Added new report file"
            git push
          fi
