# ============================================================================
# Workflow: Excel → JSON Automation
# Purpose : Automate weekly + manual Excel → JSON updates, deletions, backups,
#           and run reports (TXT only) for "my-movie-database".
# ============================================================================

name: Excel → JSON Update

on:
  workflow_dispatch:
    inputs:
      MAX_RUN_TIME_MINUTES:
        description: 'Max run time in minutes for this run (0 = no time limit)'
        default: '300'
        required: false
      MAX_PER_RUN:
        description: 'Limit number of shows to process (0 = process all)'
        default: '0'
        required: false
  schedule:
    - cron: "30 18 * * 6"  # Every Sunday 00:00 AM IST (Saturday 18:30 UTC)

jobs:
  update-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Write Excel file ID
        run: echo "${{ secrets.EXCEL_FILE_ID }}" > EXCEL_FILE_ID.txt

      - name: Write Google Drive service account
        run: echo '${{ secrets.GDRIVE_SERVICE_ACCOUNT }}' > GDRIVE_SERVICE_ACCOUNT.json

      # ------------------ Run updater and capture report ------------------
      - name: Run Excel→JSON updater
        id: run_updater
        run: |
          set -euo pipefail

          # Read inputs (expanded by Actions). Provide safe defaults in shell.
          MAX_PER_RUN="${{ github.event.inputs.MAX_PER_RUN }}"
          MAX_PER_RUN="${MAX_PER_RUN:-0}"
          MAX_RUN_TIME_MINUTES="${{ github.event.inputs.MAX_RUN_TIME_MINUTES }}"
          MAX_RUN_TIME_MINUTES="${MAX_RUN_TIME_MINUTES:-300}"
          EVENT_NAME="${{ github.event_name }}"
          KEEP_OLD_IMAGES_DAYS="${{ env.KEEP_OLD_IMAGES_DAYS:-7 }:-7}"

          # Run your Python updater; capture output to parse report path
          output=$(python create_update_backup_delete.py 2>&1 || true)
          printf '%s\n' "$output"

          # try to parse a "Report written -> path" or "Report written → path" line
          report_path=$(printf '%s\n' "$output" | awk -F'->' '/Report written/ {gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2; exit}')
          if [ -z "$report_path" ]; then
            report_path=$(printf '%s\n' "$output" | awk -F'→' '/Report written/ {gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2; exit}')
          fi

          # fallback to latest report file in reports/
          if [ -z "$report_path" ] || [ ! -f "$report_path" ]; then
            report_path=$(ls -t reports/report_*.txt 2>/dev/null | head -n1 || true)
          fi

          echo "report_path=$report_path" >> "$GITHUB_OUTPUT"

          # prepare email subject as an output
          if [ "${EVENT_NAME:-}" = "schedule" ]; then
            prefix="[Automatic]"
          else
            prefix="[Manual]"
          fi
          subj_date=$(date -u "+%d %B %Y %H:%M")
          echo "email_subject=$prefix Workflow $subj_date Report" >> "$GITHUB_OUTPUT"

      # ------------------ Commit & push changes ------------------
      - name: Commit & push changes
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add seriesData.json images/ backups/ reports/ deleted-data/ || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Automated update: $(date -u '+%Y-%m-%d %H:%M:%S')"
            git push
          fi

      # ------------------ Upload Reports ------------------
      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-reports
          path: reports/

      # ------------------ Scan for Secrets ------------------
      - name: Scan for secrets
        if: always()
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source=. --report-path=reports/secrets_report.txt --no-banner --redact

      # ------------------ Compose consolidated email body ------------------
      - name: Compose consolidated email body
        id: compose_email
        run: |
          set -euo pipefail

          report="${{ steps.run_updater.outputs.report_path }}"
          if [ -z "$report" ] || [ ! -f "$report" ]; then
            report=$(ls -t reports/report_*.txt 2>/dev/null | head -n1 || true)
          fi

          tmpfile=$(mktemp)
          {
            echo "SECRETS CHECK:"
            if [ -s reports/secrets_report.txt ]; then
              echo "- Gitleaks detected potential secrets. (Details below)"
              sed 's/%/%%/g' reports/secrets_report.txt || true
            else
              echo "- No obvious secrets detected."
            fi

            echo ""
            echo "--- REPORT CONTENT (pasted below) ---"
            if [ -n "$report" ] && [ -f "$report" ]; then
              sed 's/%/%%/g' "$report" || true
            else
              echo "⚠️ Report file not found."
            fi
          } > "$tmpfile"

          # Expose the temp file path as a single-line output
          echo "email_file=$tmpfile" >> "$GITHUB_OUTPUT"

      # ------------------ Send consolidated report email ------------------
      - name: Send consolidated report email
        if: always()
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          NOTIFY_EMAIL: ${{ secrets.NOTIFY_EMAIL }}
          FROM_EMAIL: ${{ secrets.SMTP_USERNAME }}
          EMAIL_SUBJECT: ${{ steps.run_updater.outputs.email_subject }}
        run: |
          set -euo pipefail

          # Get the path to the email body file created in previous step (Actions expands this)
          email_file="${{ steps.compose_email.outputs.email_file }}"
          if [ -z "$email_file" ] || [ ! -f "$email_file" ]; then
            echo "::warning::Email body file not found; sending short fallback message."
            printf "%s\n" "Automated workflow ran. No detailed report available." > /tmp/email_fallback.txt
            email_file=/tmp/email_fallback.txt
          fi

          # Embedded Python mailer is base64-encoded to avoid YAML/heredoc parsing issues.
          echo "aW1wb3J0IHN5cywgb3MsIHNtdHBsaWIKZnJvbSBlbWFpbC5taW1lLnRleHQgaW1wb3J0IE1JTUVUZXh0CmZyb20gZW1haWwubWltZS5tdWx0aXBhcnQgaW1wb3J0IE1JTUVNdWx0aXBhcnQKCmVtYWlsX2ZpbGUgPSBzeXMuYXJndlsxXQpzbXRwX3NlcnZlciA9IG9zLmVudmlyb24uZ2V0KCJTTVRQX1NFUlZFUiIpCnNtdHBfcG9ydCA9IG9zLmVudmlyb24uZ2V0KCJTTVRQX1BPUlQiKSBvciAiNTg3IgpzbXRwX3VzZXIgPSBvcy5lbnZpcm9uLmdldCgiU01UUF9VU0VSTkFNRSIpCnNtdHBfcGFzcyA9IG9zLmVudmlyb24uZ2V0KCJTTVRQX1BBU1NXT1JEIikKdG9fYWRkciA9IG9zLmVudmlyb24uZ2V0KCJOT1RJRllfRU1BSUwiKQpmcm9tX2FkZHIgPSBvcy5lbnZpcm9uLmdldCgiRlJPTV9FTUFJTCIpIG9yIHNtdHBfdXNlcgpzdWJqZWN0ID0gb3MuZW52aXJvbi5nZXQoIkVNQUlMX1NVQkpFQ1QiKSBvciAiV29ya2Zsb3cgUmVwb3J0IgoKd2l0aCBvcGVuKGVtYWlsX2ZpbGUsICJyIiwgZW5jb2Rpbmc9InV0Zi04IiwgZXJyb3JzPSJyZXBsYWNlIikgYXMgZmg6CiAgICBib2R5ID0gZmgucmVhZCgpCgptc2cgPSBNSU1FTXVsdGlwYXJ0KCkKbXNnWyJGcm9tIl0gPSBmcm9tX2FkZHIKbXNnWyJUbyJdID0gdG9fYWRkcgptc2dbIlN1YmplY3QiXSA9IHN1YmplY3QKbXNnLmF0dGFjaChNSU1FVGV4dChib2R5LCAicGxhaW4iKSkKCnRyeToKICAgIHBvcnQgPSBpbnQoc210cF9wb3J0KQpleGNlcHQgRXhjZXB0aW9uOgogICAgcG9ydCA9IDU4NwoKaWYgcG9ydCA9PSA0NjU6CiAgICBzZXJ2ZXIgPSBzbXRwbGliLlNNVFBfU1NMKHNtdHBfc2VydmVyLCBwb3J0LCB0aW1lb3V0PTMwKQplbHNlOgogICAgc2VydmVyID0gc210cGxpYi5TTVRQKHNtdHBfc2VydmVyLCBwb3J0LCB0aW1lb3V0PTMwKQogICAgc2VydmVyLnN0YXJ0dGxzKCkKdHJ5OgogICAgaWYgc210cF91c2VyIGFuZCBzbXRwX3Bhc3M6CiAgICAgICAgc2VydmVyLmxvZ2luKHNtdHBfdXNlciwgc210cF9wYXNzKQogICAgc2VydmVyLnNlbmRtYWlsKGZyb21fYWRkciwgW3RvX2FkZHJdLCBtc2cuYXNfc3RyaW5nKCkpCmZpbmFsbHk6CiAgICB0cnk6CiAgICAgICAgc2VydmVyLnF1aXQoKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICBwYXNzCg==" | base64 --decode > /tmp/send_email.py

          python /tmp/send_email.py "$email_file"
          rm -f /tmp/send_email.py

      # ------------------ Cleanup temp email file ------------------
      - name: Cleanup email temp file
        if: always()
        run: |
          set -euo pipefail
          email_file="${{ steps.compose_email.outputs.email_file }}"
          if [ -n "${email_file:-}" ] && [ -f "$email_file" ]; then
            rm -f "$email_file" || true

      # ------------------ End of workflow ------------------------------------------------
