# ============================================================================
# Workflow: Excel → JSON Automation
# Purpose : Automate weekly + manual Excel → JSON updates, deletions, backups,
#           and run reports (TXT only) for "my-movie-database".
# ============================================================================

name: Excel → JSON Update

on:
  workflow_dispatch:
    inputs:
      MAX_RUN_TIME_MINUTES:
        description: 'Max run time in minutes for this run (0 = no time limit)'
        default: '300'
        required: false
      MAX_PER_RUN:
        description: 'Limit number of shows to process (0 = process all)'
        default: '0'
        required: false
  schedule:
    - cron: "30 18 * * 6"  # Every Sunday 00:00 AM IST (Saturday 18:30 UTC)

jobs:
  update-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Write Excel file ID
        run: echo "${{ secrets.EXCEL_FILE_ID }}" > EXCEL_FILE_ID.txt

      - name: Write Google Drive service account
        run: echo '${{ secrets.GDRIVE_SERVICE_ACCOUNT }}' > GDRIVE_SERVICE_ACCOUNT.json

      # ------------------ Run updater and capture report ------------------
      - name: Run Excel→JSON updater
        id: run_updater
        env:
          EVENT_NAME: ${{ github.event_name }}
          GITHUB_PAGES_URL: https://brucebanner001.github.io/my-movie-database
          MAX_PER_RUN: ${{ github.event.inputs.MAX_PER_RUN || 0 }}
          MAX_RUN_TIME_MINUTES: ${{ github.event.inputs.MAX_RUN_TIME_MINUTES || 300 }}
          KEEP_OLD_IMAGES_DAYS: 7
          SCHEDULED_RUN: ${{ github.event_name == 'schedule' && 'true' || 'false' }}
        run: |
          set -euo pipefail
          output=$(python create_update_backup_delete.py 2>&1 || true)
          printf '%s\n' "$output"

          report_path=$(printf '%s\n' "$output" | awk -F'→' '/Report written/ {gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2; exit}')
          if [ -z "$report_path" ] || [ ! -f "$report_path" ]; then
            report_path=$(ls -t reports/report_*.txt 2>/dev/null | head -n1 || true)
          fi

          echo "report_path=$report_path" >> "$GITHUB_OUTPUT"

          if [ "${EVENT_NAME:-}" = "schedule" ]; then
            prefix="[Automatic]"
          else
            prefix="[Manual]"
          fi
          subj_date=$(date -u "+%d %B %Y %H:%M")
          echo "email_subject=$prefix Workflow $subj_date Report" >> "$GITHUB_OUTPUT"

      # ------------------ Commit and Push Changes ------------------
      - name: Commit & push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add seriesData.json images/ backups/ reports/ deleted-data/ || true
          git commit -m "Automated update: $(date -u '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push

      # ------------------ Upload Reports ------------------
      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-reports
          path: reports/

      # ------------------ Scan for Secrets ------------------
      - name: Scan for secrets
        if: always()
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source=. --report-path=reports/secrets_report.txt --no-banner --redact

      # ------------------ Compose consolidated email body ------------------
      - name: Compose consolidated email body
        id: compose_email
        run: |
          set -euo pipefail
          report="${{ steps.run_updater.outputs.report_path }}"
          if [ -z "$report" ] || [ ! -f "$report" ]; then
            report=$(ls -t reports/report_*.txt 2>/dev/null | head -n1 || true)
          fi

          tmpfile=$(mktemp)
          {
            echo "SECRETS CHECK:"
            if [ -s reports/secrets_report.txt ]; then
              echo "- Gitleaks detected potential secrets. (Details below)"
              sed 's/%/%%/g' reports/secrets_report.txt || true
            else
              echo "- No obvious secrets detected."
            fi

            echo ""
            echo "--- REPORT CONTENT (pasted below) ---"
            if [ -n "$report" ] && [ -f "$report" ]; then
              sed 's/%/%%/g' "$report" || true
            else
              echo "⚠️ Report file not found."
            fi
          } > "$tmpfile"

          echo "email_file=$tmpfile" >> "$GITHUB_OUTPUT"

      # ------------------ Send consolidated report email ------------------
      - name: Send consolidated report email
        if: always()
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          NOTIFY_EMAIL: ${{ secrets.NOTIFY_EMAIL }}
          FROM_EMAIL: ${{ secrets.SMTP_USERNAME }}
          EMAIL_SUBJECT: ${{ steps.run_updater.outputs.email_subject }}
        run: |
          set -euo pipefail
          email_file="${{ steps.compose_email.outputs.email_file }}"
          if [ -z "$email_file" ] || [ ! -f "$email_file" ]; then
            echo "::warning::Email body file not found; sending short fallback message."
            printf "%s\n" "Automated workflow ran. No detailed report available." > /tmp/email_fallback.txt
            email_file=/tmp/email_fallback.txt
          fi

          python - "$email_file" <<'PY'
import sys, os, smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

email_file = sys.argv[1]
smtp_server = os.environ.get("SMTP_SERVER")
smtp_port = os.environ.get("SMTP_PORT") or "587"
smtp_user = os.environ.get("SMTP_USERNAME")
smtp_pass = os.environ.get("SMTP_PASSWORD")
to_addr = os.environ.get("NOTIFY_EMAIL")
from_addr = os.environ.get("FROM_EMAIL") or smtp_user
subject = os.environ.get("EMAIL_SUBJECT") or "Workflow Report"

with open(email_file, "r", encoding="utf-8", errors="replace") as fh:
    body = fh.read()

msg = MIMEMultipart()
msg["From"] = from_addr
msg["To"] = to_addr
msg["Subject"] = subject
msg.attach(MIMEText(body, "plain"))

port = int(smtp_port)
if port == 465:
    server = smtplib.SMTP_SSL(smtp_server, port, timeout=30)
else:
    server = smtplib.SMTP(smtp_server, port, timeout=30)
    server.starttls()

try:
    if smtp_user and smtp_pass:
        server.login(smtp_user, smtp_pass)
    server.sendmail(from_addr, [to_addr], msg.as_string())
finally:
    server.quit()
PY

      # ------------------ Cleanup temp email file ------------------
      - name: Cleanup email temp file
        if: always()
        run: |
          set -euo pipefail
          email_file="${{ steps.compose_email.outputs.email_file }}"
          if [ -n "${email_file:-}" ] && [ -f "$email_file" ]; then
            rm -f "$email_file" || true
          fi
