# ============================================================================
# Workflow: Excel → JSON Automation
# Purpose : Automate weekly + manual Excel → JSON updates, deletions, backups,
#           and run reports (TXT only) for "my-movie-database".
# ============================================================================

name: Excel → JSON Update

# ------------------------------------------------------
# Triggers
# ------------------------------------------------------
on:
  workflow_dispatch:       # Manual trigger via GitHub Actions UI
    inputs:
      MAX_RUN_TIME_MINUTES:
        description: 'Max run time in minutes for this run (0 = no time limit)'
        default: '300'
        required: false
      MAX_PER_RUN:
        description: 'Limit number of shows to process (0 = process all)'
        default: '0'
        required: false
  schedule:
<<<<<<< HEAD
    - cron: "30 18 * * 6"  # Sunday 00:00 AM IST (Saturday 18:30 UTC)
=======
    - cron: "30 18 * * 6"  # Scheduled: Every Sunday 00:00 AM IST (Saturday 18:30 UTC)
>>>>>>> 799e0c5 (Modified Codes)

jobs:
  update-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # allow workflow to push back to the repo

    steps:
      # ------------------------------------------------------
      # 1. Checkout the repo
      # ------------------------------------------------------
      - name: Checkout repo
        uses: actions/checkout@v4

      # ------------------------------------------------------
      # 2. Set up Python (v3.11)
      # ------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ------------------------------------------------------
      # 3. Install dependencies from requirements.txt
      # ------------------------------------------------------
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ------------------------------------------------------
      # 4. Write secrets to files
      # ------------------------------------------------------
      - name: Write Excel file ID
        run: echo "${{ secrets.EXCEL_FILE_ID }}" > EXCEL_FILE_ID.txt

      - name: Write Google Drive service account
        run: echo '${{ secrets.GDRIVE_SERVICE_ACCOUNT }}' > GDRIVE_SERVICE_ACCOUNT.json

      # ------------------------------------------------------
      # 5. Run main script (create_update_backup_delete.py)
      # ------------------------------------------------------
      - name: Run Excel → JSON script
        env:
          GITHUB_PAGES_URL: https://brucebanner001.github.io/my-movie-database
          # Use manual inputs if provided, otherwise defaults
          MAX_PER_RUN: ${{ github.event.inputs.MAX_PER_RUN || 0 }}
          MAX_RUN_TIME_MINUTES: ${{ github.event.inputs.MAX_RUN_TIME_MINUTES || 300 }}
          KEEP_OLD_IMAGES_DAYS: 7
          SCHEDULED_RUN: ${{ github.event_name == 'schedule' && 'true' || 'false' }}
        run: python create_update_backup_delete.py

      # ------------------------------------------------------
      # 6. Commit and push changes back to repo
      # ------------------------------------------------------
      - name: Commit & push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add seriesData.json images/ backups/ reports/ deleted-data/
          git commit -m "Automated update: $(date -u '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push

      # ------------------------------------------------------
      # 7. Upload reports as GitHub Action artifacts
      # ------------------------------------------------------
      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-reports
          path: reports/

      # ------------------------------------------------------
      # 8. Run gitleaks to check for secret exposure
      # ------------------------------------------------------
      - name: Scan for secrets
        if: always()
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source=. --report-path=reports/secrets_report.txt --no-banner --redact

      # ------------------------------------------------------
      # 9. Send success email
      # ------------------------------------------------------
      - name: Send success email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ github.event_name == 'schedule' && '[Automatic] JSON Update Successful' || '[Manual] JSON Update Successful' }}
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
          body: |
            ✅ JSON update completed successfully.
            Repo: ${{ github.repository }}
            Run: ${{ github.run_id }}
            Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

      # ------------------------------------------------------
      # 10. Send failure email
      # ------------------------------------------------------
      - name: Send failure email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ github.event_name == 'schedule' && '[Automatic] JSON Update Failed' || '[Manual] JSON Update Failed' }}
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
          body: |
            ❌ JSON update failed.
            Repo: ${{ github.repository }}
            Run: ${{ github.run_id }}
            Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

      # ------------------------------------------------------
      # 11. Send secrets exposure email (if gitleaks found issues)
      # ------------------------------------------------------
      - name: Send secrets alert email
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "[ALERT] Secrets detected in repo update!"
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
          body: |
            ⚠️ Potential secrets detected in the repo during the update run.
            See attached report for details.
          attachments: reports/secrets_report.txt
